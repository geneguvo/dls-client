CMS DLS/LFC Stress Test Suite Version 1.0
Fabio Farina
fabio.farina@cern.ch

-- HOW TO RUN THE SETUP ---

The script runs a group of different test to stress the DLS backends.

(optional) if you use LFC implementation of the DLS client the execute
export LFC_HOME=<your lfc server>

Then simply run the command 
./run_test.py

with the proper arguments. 
In the following I give some brief explaining about the test tipologies:

-r Repetition Test: it performs many and many times the same sequence of actions, to stress 
	the repeatability of the operations and the consistency of data.

-c Concurrency Test: many operations are performed concurrently to stress the cache of the server and 
	hidden race conditions.

-m Magnitude Test: stress the connection and the persistent data using high latency connections 
	and oversize data fields. Pay attention to set up this test properly it could cause 
	serious problems to the DB behind LFC service (mainly for oversize data).

-a Random Test: repeat the previously tests introducing unexpected changes. It is useful to cover 
	uncommon program paths errors.

-u User Simulation: a smart random test. It generates coerent sequences of actions to mimic the behaviour
	of a mean user.

Furthermore as You run a test you can specify the arrival queue model used to introduce delays in the thread ececutions.

There are three different models:

-distribution=pareto (default)
	The threads are created and then they are immediatly woken up

-distribution=burst
	The threads are created and then they are summoned all together

-distribution=pareto
	The threads are created and then suspended for a random time distributed according
	and haevy tailed distribution. You can change the parameters of the distribution
	editing the parameters.py file. 

--- HOW TO SET UP THE TEST PARAMETERS ---

This is a short guide to setup the parameters used for the Stress-Test.
Such parameters are in the file parameters.py:

- threadNum (int)
	the number of threads used during each phase.

- clientDir (str)
	the location of the dls client commands

- nBlocks (int)
	number of blocks for each file
- nReplicas (int)
	number of replicas for each fileblock

- paretoK (int) and paretoAlpha (float)
	these values are used to model the clients arrival queue.
	paretoK should be smaller or equals to threadNum, while paretoAlpha
	is the hard-tail parameter for the distribution.Pay attention tuning it,
	it could generate REALLY long wait time.

- magThread (int), magBlocks (int), magReplicas (int), magParetoK (float)
	multiplication coefficients of the previously described parameters. 
	The are called by the most stressing phase (Magnitude Test), tune them
	carefully.

- magBlockPreambleLen (int) and magSePreambleLen (int)
	padding fields sizes. The set values are qualitative, as soon as I will
	know the actual LFC field sizes I will fix such values.

- randRepetitions (int) and randFactor (int)
	coefficients for the random test. They act mainly on the number of random tests
	and on the range of the random parameters.

- The following parameters act on the probabilistic automaton used to perform
	user simulation test.

	-userBound (int) 
		the length of the automaton action chain
	- userInitStateP (array of float)
		the probability vector for the initial automaton move.
		The sum of the components has to be 1.0
	
	- userMarkov (6*6 float matrix )
		the transposed markov chain for the automaton.
		The sum of each row has to be 1.0
		The used values are euristics but without any log from LFC I can't say 
		which are the frequencies of the actions.
		
