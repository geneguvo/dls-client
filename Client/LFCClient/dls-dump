#!/usr/bin/env python

#
# $Id: dls-dump,v 1.10 2009/09/21 13:05:38 delgadop Exp $
#
# DLS Client. $Name: DLS_1_1_3 $.
# Antonio Delgado Peris. CIEMAT. CMS.
# 

#########################################
# Imports 
#########################################
import dlsApi
from dlsDataObjects import DlsLocation, DlsFileBlock, DlsEntry
import dlsClient
from dlsCommandsCommon import *
import time
import sys
import commands
import getopt

ADMITTED_IFACE_TYPES = ["DLS_TYPE_LFC", "DLS_TYPE_MYSQL", "DLS_TYPE_DBS", "DLS_TYPE_PHEDEX"]


################## GLOBAL CONSTANTS ########################
THIS_YEAR = time.localtime()[0]


######################### FUNCTIONS ########################

def usage():
   """
    Provides usage information
   """
   print "Usage: dls-dump [options] <what>"
   print "       dls-dump -u"
   print "       dls-dump -h"


def options():
   """
    Provides some information regarding the available options
   """
   print """Options summary:
   -h, --help
   -u, --usage
   -v, --verbose <verb_level>
   -e, --endpoint <endpoint>
   -i, --interface-type <iface_type>
   -r, --recursive
       --dbs-conf <conf_file>
       --show-prod
       --show-caf
       --only-subscribed
       --only-custodial
   """
def example():
  """
   Provides with an example of correct use of the script
  """
  print """
  """

def help():
   """
    Provides some help information
   """
   print """This script will print DLS entries. The printed information will
include both FileBlock names and associated locations. The interpretation
of the argument <what_to_print> depends on the back-end DLS server, as
explained below.


Specific notes for DBS and PhEDEx back-end (DLS_TYPE_DBS, DLS_TYPE_PHEDEX):

  DBS and PhEDEx FileBlock namespace is flat, and so there are no directories.
  The argument of this command will be taken as a FileBlock pattern (with
  '*' as wildcard), and information regarding the matching FileBlocks will be
  returned. If only "/"  is specified, this will be interpreted as "list the
  whole catalog". The "-r" option is ignored.

  The server endpoint is got from a string in the URL form, usually:
    "http[s]://hname[:port]/path/to/DLS".
  This endpoint is retrieved from several sources (in order of precedence):   
     - specified value for --endpoint option 
     - DLS_ENDPOINT environmental variable
     - (DBS only) specified URL in the configuration file (see --dbs-conf)
     - (PhEDEx only) DLS_PHEDEX_ENDPOINT environmental variable

  The --show-prod option can be used to turn off the filtering of
  prod-only FileBlock replicas. Use it only if you know what you are doing.


Additional DLS_TYPE_PHEDEX notes:

  The --show-caf option can be used to turn off the filtering of CAF replicas.

  The --only-subscribed option can be used to turn on filtering of
unsubscribed replicas.

  The --only-custodial option can be used to turn on the filtering of
non-custodial replicas.


Additional DLS_TYPE_DBS notes:

  Apart from DBS endpoint, other configuration options may be specified for
  the underlying DBS interface (e.g. "level" for DBS logging level) in a
  configuration file. The name of this file can be indicated with,
  in this order:
     - specified value for --dbs-conf option
     - DBS_CLIENT_CONFIG environmental variable


Specific notes for LFC back-end (DLS_TYPE_LFC):

  LFC implements a hierarchical FileBlock namespace. The argument of this
  command will be taken as a directory in that namespace, and its containing
  FileBlocks and associated locations will be dumped.

  The "-r" option makes the dumping recursive. That is, the command will print
  also the contents of the subdirectories of under the specified directory.
  
   NOTE: Be aware that the recursive dumping of LFC is a very costly operation
   and may affect DLS response, so please use this flag only with care!!

  The server endpoint should be of the form: "hname[:port][/path/to/DLS]",
  where a default port is used if not specified, and the path to DLS is
  required. The server endpoint is retrieved from (in orden of precedence):
     - specified value for --endpoint option 
     - DLS_ENDPOINT environmental variable



Options:

The "-r" option makes the dumping recursive.

The --show-prod option is only understood by the PhEDEx and DBS back-ends
and ignored by the rest. The --show-caf, --only-subscribed and 
--only-custodial options are only understood by the PhEDEx back-end.
See relevant notes.
 """
   commonHelpText(ADMITTED_IFACE_TYPES)
   options()
   usage()



def showEntries(iface, dir, recursive, showProd, showCAF, subscribed, \
                  custodial, verbose):
   """
    Prints the entries under the specified FileBlock directory.
    Argument dir is a string, holding the directory name. 
    Argument recursive indicates if information of subdirectories
    should be also printed, in a recursive way.
    
    Throws DlsApiError if there is a problem in the DLS operation.
   """

   # Get the Entries (and let the caller deal with the exception...)
   if(verbose >= 2):
      print "--DlsApi.dumpEntries(%s, recursive = %s)" % (dir, recursive)
   entryList = iface.dumpEntries(dir, recursive = recursive, session = True, \
                                 showProd = showProd, showCAF = showCAF, \
                                 subscribed = subscribed, custodial = custodial)
   

   # Print the list
   for i in entryList:
      print i.simpleStr()

            

###################### MAIN FUNCTION ########################

def main(pArgs):
   """
    Performes the main task of the script (invoked directly).
    For information on its functionality, please call the help function.
   """

 # Options and args... 
 
   longoptions=["help", "usage", "endpoint=", "interface-type=", "verbose=", \
                "recursive", "dbs-conf=", "show-prod", "show-caf", \
                "only-subscribed", "only-custodial"]
]
   try:
      optlist, args = getopt.getopt(pArgs, 'hue:i:v:r', longoptions)
   except getopt.GetoptError, inst:
      err("Bad usage: "+str(inst))
      usage()
      sys.exit(OPT_ERROR)

   rc = 0
   dbsConf = None
   verbose = 1
   endpoint = None
   iface_type = None
   recursive = False
   showProd = False
   showCAF = False
   subscribed = False
   custodial = False
   for opt, val in optlist:
       if opt in ("-h", "--help"):
           help()
           return 0 

       elif opt in ("-u", "--usage"):
           usage()
           return 0
           
       elif opt in ("", "--dbs-conf"):
           dbsConf = val

       elif opt in ("", "--show-prod"):
           showProd = True

       elif opt in ("", "--show-caf"):
           showCAF = True

       elif opt in ("", "--only-subscribed"):
           subscribed = True

       elif opt in ("", "--only-custodial"):
           custodial = True

       elif opt in ("-e","--endpoint"):
           endpoint = val

       elif opt in ("-i", "--interface-type"):
           iface_type = val

       elif opt in ("-v", "--verbose"):
           verbose = check_verbosity_value(val)
           if(verbose == OPT_ERROR): return OPT_ERROR

       elif opt in ("-r","--recursive"):
           recursive = True


   # Check the interface type (from options or environ)
   iface_type = check_iface_type(iface_type, ADMITTED_IFACE_TYPES)
   if (iface_type == TYPE_ERROR): return TYPE_ERROR


 # Get the arguments
   if(len(args)<1):
      err("Not enough input arguments")
      usage()
      return(OPT_ERROR)

   dir = args[0]

 # Create the interface binding
   try: 
      iface = create_iface_binding(iface_type, endpoint, dbsConf, verbose)
   except dlsApi.DlsApiError, inst:
      if(inst.rc):  rc = inst.rc 
      else:           rc = GENERIC_ERROR
      msg = "Error when binding the DLS interface: " + str(inst)
      err(msg)
      return rc
   
    
 # Do the query (under session)
   try:
     showEntries(iface, dir, recursive, showProd, showCAF, subscribed, \
                 custodial, verbose)
   except dlsApi.DlsApiError, inst:         
      if(inst.rc):  rc = inst.rc 
      else:           rc = GENERIC_ERROR
      msg = "Error in the DLS query: %s." % str(inst)
      err(msg)

 # Finally, return error code
   return rc



######################### SCRIPT ###########################

if __name__ == "__main__":
  sys.exit(main(sys.argv[1:]))
