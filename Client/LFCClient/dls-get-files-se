#!/usr/bin/env python

#
# $Id: dls-get-files-se,v 1.5 2009/09/21 13:05:39 delgadop Exp $
#
# DLS Client. $Name: DLS_1_1_3 $.
# Antonio Delgado Peris. CIEMAT. CMS.
# 

#########################################
# Imports 
#########################################
import dlsApi
from dlsDataObjects import DlsLocation, DlsFile
import dlsClient
from dlsCommandsCommon import *
import time
import sys
import commands
import getopt

ADMITTED_IFACE_TYPES = ["DLS_TYPE_PHEDEX"]


################## GLOBAL CONSTANTS ########################
THIS_YEAR = time.localtime()[0]


######################### FUNCTIONS ########################

def usage():
   """
    Provides usage information
   """
   print "Usage: dls-get-files-se [options] <fBlock> [<fBlock> ..]"
   print "       dls-get-files-se [options] -f <listing_file>"
   print "       dls-get-files-se -u"
   print "       dls-get-files-se -h"


def options():
   """
    Provides some information regarding the available options
   """
   print """Options summary:
   -h, --help
   -u, --usage
   -v, --verbose <verb_level>
   -e, --endpoint <endpoint>
   -i, --interface-type <iface_type>
   -f, --from-file <filename>
       --show-prod
       --show-caf
       --only-subscribed
       --only-custodial
   """
#   -s, --sitename

def example():
  """
   Provides with an example of correct use of the script
  """
  print """
  """

def help():
   """
    Provides some help information
   """
   print """This script will print the files composing the specified
FileBlocks and the locations associated to each of those files (i.e., there is
a copy of that file in that location (SE)).

Specific notes for PhEDEx back-end (DLS_TYPE_PHEDEX):

  The arguments of this command are FileBlock names, no wildcards ('*' or
  '#' are allowed).

  The --show-prod option can be used to turn off the filtering of
  prod-only file replicas. Use it only if you know what you are doing.

  The --show-caf option can be used to turn off the filtering of CAF replicas.

  The --only-subscribed option can be used to turn on filtering of
unsubscribed replicas.

  The --only-custodial option can be used to turn on the filtering of
non-custodial replicas.

  The server endpoint is got from a string in the URL form, usually:
    "http[s]://hname[:port]/path/to/DLS".
  This endpoint is retrieved from several sources (in order of precedence):   
     - specified value for --endpoint option 
     - DLS_ENDPOINT environmental variable
     - (DBS only) specified URL in the configuration file (see --dbs-conf)
     - (PhEDEx only) DLS_PHEDEX_ENDPOINT environmental variable


Options:

The "-f" option can be used to retrieve FileBlock names from a file rather
than from the given arguments. The file must contain one line per FileBlock
to be listed.

The --show-prod option is only understood by the PhEDEx and DBS back-ends
and ignored by the rest. The --show-caf, --only-subscribed and 
--only-custodial options are only understood by the PhEDEx back-end.
See relevant notes.
   """
#The "-s" option will cause (for those implementations supporting it) the printing
#of the CMS site name instead of the corresponding SE.
   commonHelpText(ADMITTED_IFACE_TYPES)
   options()
   usage()



def showFileLocs(iface, lineList, showSite, showProd, showCAF, subscribed, custodial, verbose):
   """
    Prints the files composing the specified FileBlock and their associated locations.
    
    Throws DlsApiError if there is a problem in the DLS operation.
   """

   fbList = []
   for line in lineList:
   
      # Split
      line = (line.strip()).split()
      if(not line):
         continue

      # Get LFN
      lfn = line.pop(0)

      # Store all the FileBlocks 
      fbList.append(lfn)

    
   if(verbose >= 2):
      print "--DlsApi.getFileLocs(",
      for i in fbList: print i, ";",
      print ")"

   # Get the file-locs association (and let the caller deal with the exception...)
   flList = iface.getFileLocs(fbList, showProd = showProd, showCAF = showCAF, \
                                 subscribed = subscribed, custodial = custodial)

   # Print the list   
   for pair in flList:
     print 'FILEBLOCK: '+pair[0].name
     print
     for fl in pair[1]:
       print fl.name
       for loc in pair[1][fl]:
         print loc.host
# NOTE: If -s is supported, comment previous line and uncomment the following
#         if showSite:
#             print loc.attribs['node']
#         else:
#             print loc.host
       print
     print

   # OLD version (all files in same dict, no fB info)
#   for fl in flList:
#      print fl.name
#      for loc in flList[fl]:
#        print loc.host
#      print


###################### MAIN FUNCTION ########################

def main(pArgs):
   """
    Performes the main task of the script (invoked directly).
    For information on its functionality, please call the help function.
   """

 # Options and args... 
 
   longoptions=["help", "usage", "endpoint=", "interface-type=", \
                "verbose=", "show-prod", "show-caf", "from-file=", \
                "only-subscribed", "only-custodial"] # "sitename", 
   try:
      optlist, args = getopt.getopt(pArgs, 'huse:i:v:f:', longoptions) # s
   except getopt.GetoptError, inst:
      err("Bad usage: "+str(inst))
      usage()
      sys.exit(OPT_ERROR)

   rc = 0
   verbose = 1
   endpoint = None
   iface_type = None
   showProd = False
   showCAF = False
   subscribed = False
   custodial = False
   fromFile = False
   fname=""
   site = False
   for opt, val in optlist:
       if opt in ("-h", "--help"):
           help()
           return 0

       elif opt in ("-u", "--usage"):
           usage()
           return 0
           
       elif opt in ("-e","--endpoint"):
           endpoint = val

       elif opt in ("-i", "--interface-type"):
           iface_type = val

       elif opt in ("-v", "--verbose"):
           verbose = check_verbosity_value(val)
           if(verbose == OPT_ERROR): return OPT_ERROR

       elif opt in ("-s", "--sitename"):
           site = True
           
       elif opt in ("", "--show-prod"):
           showProd = True

       elif opt in ("", "--show-caf"):
           showCAF = True

       elif opt in ("", "--only-subscribed"):
           subscribed = True

       elif opt in ("", "--only-custodial"):
           custodial = True

       elif opt in ("-f","--from-file"):
           fromFile = True
           fname = val


   # Check the interface type (from options or environ)
   iface_type = check_iface_type(iface_type, ADMITTED_IFACE_TYPES)
   if (iface_type == TYPE_ERROR): return TYPE_ERROR


   # From file
   if(fromFile):
      try:
         file = open(fname, 'r')
      except IOError, inst:
         msg = "The file "+fname+" could not be opened: "+str(inst)
         err(msg)
         return FILE_ERROR
      lineList = file.readlines()
      file.close()
      
   # From command line options
   else:
     if(len(args)<1):
        err("Not enough input arguments")
        usage()
        return(OPT_ERROR)
    
     lineList = []
     for token in args:
        lineList.append(token)


 # Create the interface binding
   try: 
      iface = create_iface_binding(iface_type, endpoint, None, verbose)
   except dlsApi.DlsApiError, inst:
      if(inst.rc):  rc = inst.rc 
      else:           rc = GENERIC_ERROR
      err("Error when binding the DLS interface: " + str(inst))
      return rc
   
 # Do the query 
   try:
     showFileLocs(iface, lineList, site, showProd, showCAF, subscribed, \
                  custodial, verbose)
   except dlsApi.DlsApiError, inst:         
      if(inst.rc):  rc = inst.rc 
      else:           rc = GENERIC_ERROR
      err("Error in the DLS query: %s." % str(inst))

 # Finally, return error code
   return rc



######################### SCRIPT ###########################

if __name__ == "__main__":
  sys.exit(main(sys.argv[1:]))
