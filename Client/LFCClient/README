#
# $Id: README,v 1.5 2009/09/21 13:05:38 delgadop Exp $
#
# DLS Client. $Name: DLS_1_1_3 $.
# Antonio Delgado Peris. CIEMAT. CMS.
#

Introduction
------------
This DLS Client is a set of python modules (API) and CLI tools that can be
used to access a DLS server.

The Data Location Service (DLS) is part of the CMS Data Management system and
provides means to locate replicas of data in the distributed computing system,
as described in the DLS Twiki: https://twiki.cern.ch/twiki/bin/view/CMS/DLS.

The DLS API and CLI allow the user to add, update, delete, query entries in
the DLS catalog.



Contents
--------

 dlsApi.py: contains the DlsApi class, which defines the DLS Client API,
 that other classes implement.

 dlsDataObjects.py: contains essential data containers for all dlsApi.py
 operations.

 dlsClient.py: contains the DlsClient class, which defines a generic
 interface to retrieve one of the DlsApi implementations (see next group
 of files), depending on the DLS type defined by the user or the environment.
 
 dlsPhedexApi.py, dlsDbsApi.py, dlsLfcApi.py, dlsMySQLApi.py, dlsDliClient.py:
 contain the DlsPhedexApi, DlsDbsApi, DlsLfcApi, DlsMySQLApi and DlsDliClient
 classes, which implement the DlsApi methods, for different back-end DLS
 implementations to be accessed:
 DLS integrated with PhEDEx or DBS, LFC-based, MySQL-based and DLI-based.

 dls-*: implement the CLI that uses one the API implementations
 (retrieved using DlsClient). In principle, the CLI should work with either
 API implementation, for the functionalities that each API implements.



Setup
-----
You probably need to adjust your PYTHONPATH env variable to the modules
mentioned before and to any other required by them (only for the implementation
that is going to be used). Please refer to the documentation of the different
API implementations for information on dependencies of each of them.

For the authenticated DBS back-end (only for addition and deletion operations) and
for the LFC-based implementation, standard grid security installation and
a valid grid proxy are required.

You also need to set the DLS endpoint to use, and the type of DLS interface
that will be used. That can be set either as a command line option or a
environmental variable, or as an argument to an API function. Please read
the documentation.

NOTE on endpoints: 

 Default endpoints are distributed in RPM-based installations for DBS
 and PhEDEx back-ends. For DBS, the DBS_CLIENT_CONFIG env variable is 
 set to point to DBS' default config file. This includes the global 
 read-only DBS endpoint. For PhEDEx, the DLS_PHEDEX_ENDPOINT is set to 
 the default global. 

 Global endpoints might change, or you may want to use local or 
 read/write back-ends. You may always unset these variables or just
 override them with API arguments or CLI options.

 More information on existing endpoints on DLS Twiki.



On documentation
----------------
All python modules and scripts (CLI tools) here contained are
self-documented. This documentation can be accessed in the following ways:

  - Online help for python modules, in the python interpreter:
    >>> import my_module
    >>> help(my_module)
    
  - Online help for scripts (CLI tools):
    $> any_command -h

  - HTML documentation for python modules:
    It can by created with the "epydoc" package (from http://epydoc.sourceforge.net).
    Copy the interesting modules in a directory, and run:
       epydoc --html <modules_dir>/*
    A folder called "html" will be created with the necessary files. The one called
    "index.html" can be loaded in a browser and has links to the rest.

  - Read the docstrings directly from the source files.

  - Otherwise, check DLS Twiki

In addition, since the CLI tools use the API, the scripts source code are good
examples of API usage.
