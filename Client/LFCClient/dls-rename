#!/usr/bin/env python

#
# $Id: dls-rename,v 1.6 2008/05/20 14:27:54 delgadop Exp $
#
# DLS Client. $Name: DLS_1_1_3 $.
# Antonio Delgado Peris. CIEMAT. CMS.
# 

#########################################
# Imports 
#########################################
import dlsApi
from dlsDataObjects import DlsFileBlock
import dlsClient
from dlsCommandsCommon import *
import sys
import commands
import getopt

ADMITTED_IFACE_TYPES = ["DLS_TYPE_LFC", "DLS_TYPE_MYSQL"]


######################### FUNCTIONS ########################

def usage():
   """
    Provides usage information
   """
   print "Usage: dls-rename [-v, -t, -p, -e, -i] <old_fileblock> <new_fileblock>"
   print "       dls-rename [-v, -t, -p, -e, -i] -f <listing_file>"
   print "       dls-rename -u"
   print "       dls-rename -h"

def options():
   """
    Provides some information regarding the available options
   """
   print """Options summary:
   -h, --help
   -u, --usage
   -v, --verbose <verb_level>
   -t, --transaction
   -e, --endpoint <endpoint>
   -i, --interface-type <iface_type>
   -f, --from-file <filename>
   -p, --create-parent
   """
def example():
  """
   Provides with an example of correct use of the script
  """
  print """
  """

def help():
   """
    Provides some help information
   """
   print """Renames a FileBlock in the DLS server: from <old_fileblock> to
<new_fileblock>. 

If the new FileBlock already exists, it is removed before the renaming takes
place. 


Specific notes for PhEDEx back-end (DLS_TYPE_PHEDEX):

  This command cannot be used with a PhEDEx back-end.


Specific notes for DBS back-end (DLS_TYPE_DBS):

  This command cannot be used with a DBS back-end.


Specific notes for LFC back-end (DLS_TYPE_LFC):
 
  LFC implements a hierarchical FileBlock namespace. The arguments of this
  command can also be FileBlock directories. If the destination directory exists, then
  it must be empty must be empty (so that it can be removed).
  
  The server endpoint should be of the form: "hname[:port][/path/to/DLS]",
  where a default port is used if not specified, and the path to DLS is
  required. The server endpoint is retrieved from (in orden of precedence):
     - specified value for --endpoint option 
     - DLS_ENDPOINT environmental variable


Options:
  
If "-p" is specified, then the parent directories of the new FileBlock are checked
for existence, and created if non existing. Be aware that using this option for new
FileBlocks in directories already existing is unnecesary and may slow down the
operation slightly.

The "-f" option can be used to retrieve multiple old and new FileBlock names
from a file. This may be quite faster than invoking the command several times.
The file must contain one line per pair of old/new FileBlock names, separated
by whitespaces. In this case, the "-p" option has the same meaning as before
and affects all FileBlocks in <listfile>.

The "-t" option indicates if transactions should be used. In that case, any
error in an operation causes a stop (no more renamings) and a rollback of
the previous operations. Otherwise (no transactions), after a failure in one
renaming, the tool tries to go on with the rest.

 NOTE: It is not recommended to maintain a transaction for too long (~10 seconds).
 Thus, it is suggested not to include too many FileBlocks in a <listfile> if
 transactions are to be used. For a larger number of FileBlocks, please split
 them into several invocations of the command.

   """
   commonHelpText(ADMITTED_IFACE_TYPES)
   options()
   usage()



def rename(iface, lineList, createParent, trans, verbose):
   """
    Tries to rename FileBlocks, as specified in each of the lines in lineList.
    These lines are strings containing the old and the new names of the
    FileBlocks to rename.

    The format of a line is then:
    <old_lfn> <new_lfn>

    All elements separated by whitespaces.

    Throws DlsApiError if there is a problem in the DLS operation, unless
    trans is set to True.
   """

   if(trans):
      iface.startTrans()
   else:
      iface.startSession()

   for line in lineList:

      # Split
      line = (line.strip()).split()
      if((not line) or (len(line)<2)):
         continue
         
      # Get LFNs
      oldLfn = line.pop(0)
      newLfn = line.pop(0)

      # Do the rename
      try:
         if(verbose >= 2):
            print "--DlsApi.rename(\"%s\",\"%s\")" % (oldLfn, newLfn)
         iface.renameFileBlock(oldLfn, newLfn, createParent=createParent,trans=False,session=False)
      except dlsApi.DlsApiError, inst:         
         if(trans):
             iface.abortTrans()
             inst.msg += ". Transaction operations rolled back"
             raise inst
         else: 
           continue

   if(trans):
      iface.endTrans()
   else:
      iface.endSession()

            

###################### MAIN FUNCTION ########################

def main(pArgs):
   """
    Performes the main task of the script (invoked directly).
    For information on its functionality, please call the help function.
   """

 # Options and args... 
 
   longoptions=["help", "usage", "create-parent", "transaction", "endpoint=", "interface-type=", "verbose=","from-file="]
   try:
      optlist, args = getopt.getopt(pArgs, 'hupte:i:v:f:', longoptions)
   except getopt.GetoptError, inst:
      err("Bad usage: "+str(inst))
      usage()
      sys.exit(OPT_ERROR)

   rc = 0
   createParent = False 
   trans = False
   verbose = 1
   endpoint = None
   iface_type = None
   fromFile = False
   fname=""
   for opt, val in optlist:
       if opt in ("-h", "--help"):
           help()
           return 0

       elif opt in ("-u", "--usage"):
           usage()
           return 0
           
       elif opt in ("-p", "--create-parent"):
           createParent = True
           
       elif opt in ("-t", "--transaction"):
           trans = True

       elif opt in ("-e","--endpoint"):
           endpoint = val

       elif opt in ("-i", "--interface-type"):
           iface_type = val

       elif opt in ("-v", "--verbose"):
         verbose = check_verbosity_value(val)
         if(verbose == OPT_ERROR): return OPT_ERROR

       elif opt in ("-f","--from-file"):
           fromFile = True
           fname = val
           
  
   # Check the interface type (from options or environ)
   iface_type = check_iface_type(iface_type, ADMITTED_IFACE_TYPES)
   if (iface_type == TYPE_ERROR): return TYPE_ERROR


 # Build the arguments

   # From file
   if(fromFile):
      try:
         file = open(fname, 'r')
      except IOError, inst:
         msg="The file "+fname+" could not be opened: "+str(inst)
         err(msg)
         return FILE_ERROR
      lineList = file.readlines()
      file.close()
      
   # From command line options
   else:
      if(len(args)<2):
         err("Not enough input arguments")
         usage()
         return(OPT_ERROR)

      line=""
      for token in args:
         line += token +" "
      lineList = [line]


 # Create the interface binding
   try: 
      iface = create_iface_binding(iface_type, endpoint, dbsConf, verbose)
   except dlsApi.DlsApiError, inst:
      if(inst.rc):  rc = inst.rc 
      else:           rc = GENERIC_ERROR
      msg = "Error when binding the DLS interface: " + str(inst)
      err(msg)
      return rc

 # Go   
   try:
     rename(iface, lineList, createParent, trans, verbose)
   except dlsApi.DlsApiError, inst:         
      if(inst.rc):  rc = inst.rc 
      else:           rc = GENERIC_ERROR
      msg = "Error in the FileBlock(s) renaming: %s." % str(inst)
      err(msg)

 # Finally, return error code
   return rc



######################### SCRIPT ###########################

if __name__ == "__main__":
  sys.exit(main(sys.argv[1:]))
